#!/bin/bash

# Read the Passphrase from Console
do_read_passphrase()
{
   local __key
   local __passphrase=""
   __passphrase="$(systemd-ask-password --id=$1 "Enter $1 Password: ")"
   until openssl aes-256-cbc -d -salt -in ~/keys/$1.key -out /dev/null -k "${__passphrase}" >/dev/null 2>&1; do
      __passphrase="$(systemd-ask-password --id=$1 "Incorrect Password. Enter $1 Password: ")"
   done
   __key=$(keyctl add user "$1" "${__passphrase}" @u)
   keyctl timeout ${__key} $2
}

# Link the seeion to the User keyring so Keys are available to new login processes
keyctl link @us @s

[ -f ~/host.conf ] && . ~/host.conf

# Ask for timeout
echo -ne "\033[1mBoot Timeout (m): \033[0m"
read -rt 30 timeout; 
until [[ "${timeout}" =~ ^[0-9]+$ ]]; do
   echo -ne "\033[1mBoot Timeout (m): \033[0m"
   read -rt 30 timeout;
done
if [ -z "${timeout}" ]; then  timeout=10; fi
timeout=$((timeout*60))

# Get the stored Keys
cd ~/keys
files=*.key
for f in ${files}; do
   key=$(echo ${f} |sed 's/\.key$//')
   do_read_passphrase $key $timeout
done

# Wake-up System
if [ -f ~/host.conf ] && [ -n $MAC ] && [ -n $INTERFACE ]; then sudo etherwake -i $INTERFACE -b $MAC; fi

bg="bg"
echo -ne "\033[1mFork to Background? (y/n): \033[0m"
read -t 30 -rn 1 y; echo

keyctl list @u

if [[ "${y,,}" == "y" ]] || [[ -z ${y} ]]; then 
	sleep ${timeout} &
else
	sleep $timeout 
fi
